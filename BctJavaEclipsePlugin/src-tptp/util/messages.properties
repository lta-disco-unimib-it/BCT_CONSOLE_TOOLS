###############################################################################
# Copyright (c) 2005, 2009 IBM Corporation and others.
# All rights reserved. This program and the accompanying materials 
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
# $Id: messages.properties,v 1.1 2011-12-01 21:34:10 pastore Exp $
# 
# Contributors:
#     IBM Corporation - initial API and implementation
###############################################################################

# NLS_MESSAGEFORMAT_VAR
# NLS_ENCODING=UTF-8

_1 = Open Editor
_2 = N&ew
_3 = &New
_4 = &Probekit Editor
_5 = Selected Object: {0}
_6 = Selected Nothing
_7 = Selected {0} Objects
_8 = XM&L Encoding:
_9 = There are unsaved changes that conflict with changes made outside the editor.  Do you wish to discard this editor's changes?
_10 = File Conflict
_11 = &Java Code
_12 = Control Key
_13 = Java boolean expression
_14 = Language
_15 = Control Name
_16 = Name
_17 = Description
_18 = &Java code for Fragment At Class Scope
_19 = &Fragment Type
_20 = &Import directives
_21 = Invocation Object
_22 = &Target Type
_23 = Targets
_24 = Data Items
_25 = &Package name pattern
_26 = &Class name pattern
_27 = &Method name pattern
_28 = Method &signature pattern
_29 = &Fully-qualified Java type for static field
_31 = Show &Properties View
_32 = &Refresh
_33 = Discard Data
_34 = Cancel Converstion
_35 = Create a file to hold the set of probes
_36 = Create a file with a 'probe' extension in a Java source folder.
_37 = Create A New Probe File
_38 = Add data to the probe fragment
_39 = Add zero or more data probe objects.
_40 = Data Type
_41 = Name
_42 = Name every data item with a unique name.
_43 = Make each data type in a fragment unique.
_44 = Edit Data Item
_45 = F&ile Name:
_46 = S&ource Folder:
_47 = B&rowse
_48 = A&dd content to the probe file:
_49 = Method Probe
_50 = Callsite Probe
_51 = No Content (Blank Probe File)
_52 = Fra&gment types:
_53 = Name the file with the .probe extension.
_54 = Choose a file name that is not already in use.
_55 = Choose a source folder of a Java project.
_56 = Discard Invalid Data Items?
_57 = The data types of these data items are not recognized by the selected fragment type. If you continue to convert the fragment type, then these data items will be discarded.
_58 = Select a Java source folder
_59 = Click OK to return to the New Probe File dialog.
_60 = Select only one Java source folder to put the new file in.
_61 = DataItem {0} {1}
_62 = A callsite probe is inserted into the body of any method that calls the target method. For callsite probes, the class or jar files containing the methods that call the target methods are instrumented by the BCI engine. Callsite probes are often used when you want to monitor calls from your project to a system library, or to other support classes outside your project. Callsite probes are also useful when it is difficult or impossible to instrument the class files containing the methods you want to target.
_63 = This type of probe is inserted anywhere within the body of a method. For method probes, the class or jar files containing the target methods are instrumented by the byte-code instrumentation (BCI) engine.
_64 = Create a probe file with no probes, labels, version, or id. Probekit compile errors will be reported against this file until at least one probe is added.
_65 = // Put your code here
_66 =  Data probe objects contain the names and types of data items that are referenced by the source code in a fragment's Code object. A probe fragment can contain more than one Data object, but no two Data objects in a fragment can have the same type or name.
_67 = beforeCall fragments execute in the calling method immediately before the target method is called.
_68 = afterCall fragments execute in the calling method immediately after the target method exits; either a normal exit, or when the target method throws an exception.
_69 = catch fragments execute at the beginning of a catch clause in the method, or at the beginning of a finally clause that executes as the result of an exception.
_70 = entry fragments execute upon method entry. entry fragments will not execute for methods that were inserted into the class by Probekit.
_71 = executableUnit fragments execute before every executable unit of code in methods that match the probe's target and filter specification, and for which source-code is available. If the method does not have source line information, it will appear to have a single executable unit, numbered zero.
_72 = exit fragments execute upon method exit; either a normal exit, when the method throws an exception, or when a thrown exception propagates out of the method. exit fragments will not execute for methods that were inserted into the class by Probekit.
_73 = staticInitializer fragments execute inside the class initializer of every probed class. If the class does not already have a static initializer, one will be created.
_74 = The class name of the probed method, including the package name, in internal format. \n\nExample: org/eclipse/hyades/SomeClass
_75 = The method name of the probed method, in internal format. \n\nConstructors have the method name <init>, static class initializers have <clinit> as the method name.
_76 = The method argument and return type signature, in internal format.\n\nExample: (Ljava/lang/String;)I
_77 = The this object (for instance methods) that was passed to the probed method.\n\nthisObject will be null for static methods, for entry fragments that are applied to constructors, and for exit fragments applied to constructors when the constructor throws an exception.
_78 = An array of Object references representing the arguments to the probed method. There is one element in this array for each argument to the method (not counting the this argument). Arguments which are primitive types are bound into temporary objects of the appropriate reference type, for example: Integer for int. If the method takes no arguments, this will be an Object[] array of size zero. Note that constructors for non-static inner classes have one hidden argument per 'inner' level, so the argument array will contain more elements than appear in the source code.
_79 = A reference to the object being returned. If the return type of the probed method is a primitive type, the returned value is bound into a temporary object of the appropriate reference type. If the method is void (does not return a value) or it is exiting by exception, returnedObject will be null. Valid only in afterCall fragments.
_80 = A reference to the exception object being thrown. If the method is exiting normally, exceptionObject will be null
_81 = A flag indicating whether the fragment was called from a finally clause (true), or from a catch clause (false). Valid only in catch fragments.
_82 = A flag indicating whether the fragment was called from a finally clause (true), or from a catch clause (false). Valid only in catch fragments.
_83 = An encoded list of method names and signatures. The order of the methods in this list is the same as the order of the methods in methodLineTables, and is the same as the ordering reflected by the methodNumber data item. The list will not include the names of any methods that were inserted into the class by Probekit.\n\nThe methodNames string consists of one or more method names and signatures, separated by a plus ("+") sign. The method signatures are in Java internal format. For example; a class with two methods, a default constructor a method run which takes a String and returns an int, has this methodNames string: <init>()V+run(Ljava/lang/String;)I
_84 = An encoded list of line numbers that correspond with every executable unit of code in the class. The list will not include executable units that were inserted into the class by Probekit. For an explanation of the encoding, see The methodLineTables string format.
_85 = The index number in the methodNames table for the method into which the probe fragment was inserted.
_86 = The number of the executable unit that the probe fragment was inserted into. If the method does not have source line information, it will appear to have a single executable unit, numbered zero.
_87 = Click Finish to instrument the selected resources.
_88 = Select at least one resource to instrument.
_89 = Instrument with the .probe file in the source container.
_90 = Cannot Instrument With {0}
_91 = Read the log file for details.
_92 = Click Finish to instrument the selected resources with the probe file.
_93 = Choose one probe file to instument the selected resources with.
_94 = Instrument with {0}
_95 = Select one or more .class, .jar, .war, or .ear files or directories to instrument.
_96 = Choose Probe File
_97 = Choose the probe file that the selected binaries should be instrumented with.
_98 = Fix the errors marked against the {0} file and try again. Read the Problems View for details. If the view is not open, it will be opened for you.
_99 = Fix the compile errors of {0}''s generated _probe.java files by editing the probe file, and try again. Read the Problems View for details. If the view is not open, it will be opened for you.
_100 = Some .bak files are missing; the following files were not instrumented: {0}
_101 = Ensure that you have write permissions to the output folder of {0}, and sufficient space on your drive, and try again. Read the log file for details.
_102 = Cannot instrument the files. {0}
_103 = Run this operation on Windows, Linux, or Solaris.
_104 = Ensure that probe file {0} exists in an open project.
_105 = Ensure that every element to be instrumented exists and is a supported file type (.class, .jar, .war, or .ear).
_106 = Type
_107 = Package
_108 = Class
_109 = Method
_110 = Signature
_111 = Edit Target
_112 = Name
_113 = Language
_114 = Description
_115 = Use each language only once.
_116 = &ID:
_117 = &Version
_118 = &Edit...
_119 = &Remove
_120 = &Up
_121 = &Down
_122 = &Add Probe
_123 = Imports
_124 = Targets
_125 = &Add
_126 = include
_127 = exclude
_128 = General
_129 = Probes
_131 = Syntax Problems: {0} errors, {1} warnings
_132 = Probe editor syntax checking failed
_133 = Probe syntax error checking failed: {0}
_134 = {0} cannot be resolved or is not a type
_135 = Description
_136 = Object
_137 = Edit Label
_138 = Could not find the default package. Ensure that the .probe file is in a Java project, and that the file is in the source folder of the project. (That is, the file must be in the default package.)
_146 = Finish
_147=Not recommended to instrument {0}